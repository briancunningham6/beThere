{
  "name": "modella-mongo",
  "version": "0.1.4",
  "description": "simple model plugin for mongo using monk",
  "keywords": [
    "modella",
    "mongo",
    "sync"
  ],
  "author": {
    "name": "matt mueller",
    "email": "mattmuelle@gmail.com"
  },
  "dependencies": {
    "batch": "~0.2.1",
    "monk": "~0.7.0",
    "debug": "~0.7.0",
    "mquery": "~0.3.2",
    "mongodb": "~1.3.19",
    "maggregate": "~0.1.0"
  },
  "devDependencies": {
    "modella": "*",
    "mocha": "*",
    "should": "*",
    "pwd": "*"
  },
  "main": "index",
  "readme": "# mongo\n\nMongo plugin for [modella](https://github.com/modella/modella). Uses [learnboost/monk](https://github.com/learnboost/monk) for a clean mongo driver.\n\n## Installation\n\n    npm install modella-mongo\n\n## Example\n\n```js\nvar model = require('modella');\n    mongo = require('modella-mongo')('localhost/db');\n\nvar User = model('user')\n  .attr('_id')\n  .attr('name')\n  .attr('email', { unique: true })\n  .attr('password');\n\nUser.use(mongo);\n\n/**\n * Initialize\n */\n\nvar user = new User;\n\nuser.name('matt')\n    .email('mattmuelle@gmail.com')\n    .password('test');\n\nuser.save(function(err) {\n  console.log(user.toJSON());\n});\n```\n\n## API\n\nBy loading this plugin, model inherits:\n\n\n### model#attr(attr, options)\n\nAdds the `unique` options to valid attr options. Using unique is equivalent to\nadding a unique index (see below)\n\n```js\nUser.attr('username', { unique: true })\n    .attr('email'   , { unique: true });\n```\n\n### model#index(attr, options)\n\nIndex an attribute in mongo.\n\n```js\n  User.index('email', { unique : true });\n```\n\n## mquery support\n\n`modella-mongo` provides a wrapped version of the wonderful [mquery](https://github.com/aheckmann/mquery) \nquery builder. To get it, simply call `Model.query()`.\nThis allows you to build readable and robust queries easily. When approprirate,\nmodella-mongo will return instances of `modella` models, instead of just\ndocuments. Aside from that, it follows the `mquery` API completely.\n\n### Example with mquery\n\n```js\n  User.query().findOne().where({username: 'Bob'}).exec(function(err, u) {\n    u.username() // => 'Bob'\n  });\n```\n\n## maggregate support\n\n`modella-mongo` uses the [maggregate](https://github.com/rschmukler/maggregate) \naggregation builder. To use it, simply call `Model.aggregate()`.\n\nThis allows you to build readable aggregations easily. By default it wraps\nresponses in `Model` instances, but can be disabled by passing `skipWrap` as\n`true`. It also follows the `maggregate` api completely.\n\n### Example with maggregate\n\n```js\nvar skipWrapping = true;\nUser.aggregate(skipWrapping).group({_id: '$location', locationCount: {$sum: 1}}, function(err, res) {\n  res.forEach(function(loc) {\n    console.log(\"In location %s there are %d users\", loc._id, loc.locationCount);\n  });\n});\n```\n\n## A Note about connection usage\n\nEach call to `modella-mongo` will open up a mongo connection, and return a function that can be used as a plugin for ANY Modella model. \n\nAs such it is recommended that you export the result of `modella-mongo` and then use that for all of your models.\n\n#### Example using too many connections\n\n##### models/user.js\n```js\n...\nvar mongo = require('modella-mongo')('localhost/my-db');\nUser.use(mongo);\n...\n```\n\n##### models/post.js\n```js\n...\nvar mongo = require('modella-mongo')('localhost/my-db');\nPost.use(mongo);\n...\n```\nIn the above example both the `User` and `Post` model will open a connection to the mongo database.\n\n\n#### Example of better way\n\n##### config/modella-db.js\n```js\nvar mongo = module.exports = require('modella-mongo')('localhost/my-db');\n```\n\n##### models/user.js\n```js\n...\nvar configuredDb = require('../config/modella-db');\nUser.use(configuredDb);\n...\n```\n\n##### models/post.js\n```js\n...\nvar configuredDb = require('../config/modella-db');\nPost.use(configuredDb);\n...\n```\n\nHere `modella-db.js` configures the mongo database,  and then both models use it.\n\n## License\n\nMIT\n",
  "readmeFilename": "Readme.md",
  "_id": "modella-mongo@0.1.4",
  "dist": {
    "shasum": "e96d4aadc8e7a8f86f1973f79f4b87aa44e62f6a"
  },
  "_from": "modella-mongo@~0.1.4",
  "_resolved": "https://registry.npmjs.org/modella-mongo/-/modella-mongo-0.1.4.tgz"
}
